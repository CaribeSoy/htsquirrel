/*
 The MIT License (MIT)

 Copyright (c) 2015 Aleksandar Cvetković

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 */
package htsquirrel.gui.pages.authorization;

import static htsquirrel.HTSquirrel.getLanguage;
import static htsquirrel.HTSquirrel.setAccessToken;
import static htsquirrel.HTSquirrel.setUserId;
import static htsquirrel.oauth.OAuth.getOAuthService;
import static htsquirrel.oauth.OAuth.getRequestToken;
import static htsquirrel.oauth.OAuth.getVerifier;
import static htsquirrel.oauth.Responses.getUserIdFromHt;
import htsquirrel.translations.Translations;
import static htsquirrel.utilities.ConfigProperties.saveConfigProperties;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.ParserConfigurationException;
import org.scribe.model.Token;
import org.scribe.model.Verifier;
import org.scribe.oauth.OAuthService;
import org.xml.sax.SAXException;

/**
 *
 * @author Aleksandar Cvetković <arcvetkovic@gmail.com>
 */
public class AuthorizationBase extends javax.swing.JPanel {

    /**
     * Creates new form AuthorizationBase
     */
    public AuthorizationBase() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenuCopy = new javax.swing.JPopupMenu();
        menuItemCopy = new javax.swing.JMenuItem();
        popupMenuPaste = new javax.swing.JPopupMenu();
        menuItemPaste = new javax.swing.JMenuItem();
        labelTitle = new javax.swing.JLabel();
        labelText1 = new javax.swing.JLabel();
        labelLink1 = new javax.swing.JLabel();
        labelText2 = new javax.swing.JLabel();
        textField1 = new javax.swing.JTextField();
        labelLink2 = new javax.swing.JLabel();
        labelText3 = new javax.swing.JLabel();
        textField2 = new javax.swing.JTextField();
        labelInfo = new javax.swing.JLabel();
        buttonAuthorize = new javax.swing.JButton();

        menuItemCopy.setText("Copy");
        menuItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCopyActionPerformed(evt);
            }
        });
        popupMenuCopy.add(menuItemCopy);

        menuItemPaste.setText("Paste");
        menuItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPasteActionPerformed(evt);
            }
        });
        popupMenuPaste.add(menuItemPaste);

        labelTitle.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        labelTitle.setForeground(new java.awt.Color(255, 102, 0));
        labelTitle.setText("Authorize HT Squirrel");

        labelText1.setText("HT Squirrel needs authorization to access your Hattrick data.");

        labelLink1.setForeground(new java.awt.Color(255, 102, 0));
        labelLink1.setText("What is this?");
        labelLink1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelLink1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelLink1MouseClicked(evt);
            }
        });

        labelText2.setText("Authorization link:");

        textField1.setComponentPopupMenu(popupMenuCopy);

        labelLink2.setForeground(new java.awt.Color(255, 102, 0));
        labelLink2.setText("Open in browser");
        labelLink2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelLink2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelLink2MouseClicked(evt);
            }
        });

        labelText3.setText("Enter verification code:");

        textField2.setComponentPopupMenu(popupMenuPaste);

        labelInfo.setText("Info");

        buttonAuthorize.setText("Authorize");
        buttonAuthorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAuthorizeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelTitle)
                    .addComponent(labelText1)
                    .addComponent(labelLink1)
                    .addComponent(labelText2)
                    .addComponent(textField1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelLink2)
                    .addComponent(labelText3)
                    .addComponent(textField2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonAuthorize, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelInfo))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle)
                .addGap(50, 50, 50)
                .addComponent(labelText1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelLink1)
                .addGap(18, 18, 18)
                .addComponent(labelText2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelLink2)
                .addGap(18, 18, 18)
                .addComponent(labelText3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelInfo)
                .addGap(50, 50, 50)
                .addComponent(buttonAuthorize)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private static OAuthService oAuthService;
    private static Token requestToken;
    private static Verifier verifier;
    private static Token accessToken;
    
    private void labelLink1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelLink1MouseClicked
        String chppUrl = "http://www.hattrick.org/goto.ashx?path=/Community/CHPP/ChppUserDescription.aspx";
        try {
            Desktop.getDesktop().browse(new URL(chppUrl).toURI());
        } catch (IOException ex) {
            Logger.getLogger(AuthorizationBase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (URISyntaxException ex) {
            Logger.getLogger(AuthorizationBase.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_labelLink1MouseClicked

    private void labelLink2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelLink2MouseClicked
        String chppUrl = textField1.getText();
        try {
            Desktop.getDesktop().browse(new URL(chppUrl).toURI());
        } catch (MalformedURLException ex) {
            Logger.getLogger(AuthorizationBase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AuthorizationBase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (URISyntaxException ex) {
            Logger.getLogger(AuthorizationBase.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_labelLink2MouseClicked

    private void menuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCopyActionPerformed
        String chppUrl = textField1.getText();
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Clipboard clipboard = toolkit.getSystemClipboard();
        StringSelection stringSelection = new StringSelection(chppUrl);
        clipboard.setContents(stringSelection, null);
    }//GEN-LAST:event_menuItemCopyActionPerformed

    private void menuItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPasteActionPerformed
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Clipboard clipboard = toolkit.getSystemClipboard();
        try {
            String string = (String) clipboard.getData(DataFlavor.stringFlavor);
            textField2.setText(string);
        } catch (UnsupportedFlavorException ex) {
            Logger.getLogger(AuthorizationBase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AuthorizationBase.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuItemPasteActionPerformed

    private void buttonAuthorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAuthorizeActionPerformed
        verifier = getVerifier(textField2.getText());
        Translations translations = new Translations();
        Properties properties = null;
        try {
            properties = translations.getTranslations(getLanguage());
        } catch (IOException ex) {
            Logger.getLogger(AuthorizationBase.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            accessToken = oAuthService.getAccessToken(requestToken, verifier);
            setAccessToken(accessToken);
        } catch (Exception ex) {
            labelInfo.setText(properties.getProperty("authorization_info_failure"));
            labelInfo.setForeground(new java.awt.Color(212, 0, 85));
            labelInfo.setVisible(true);
        }
        try {
            int userId = getUserIdFromHt(oAuthService, accessToken);
            setUserId(userId);
            saveConfigProperties();
            labelInfo.setText(properties.getProperty("authorization_info_success"));
            labelInfo.setForeground(new java.awt.Color(68, 170, 0));
            labelInfo.setVisible(true);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(AuthorizationBase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(AuthorizationBase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AuthorizationBase.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonAuthorizeActionPerformed

    public void refreshAuthorization() {
        Translations translations = new Translations();
        Properties properties = null;
        try {
            properties = translations.getTranslations(getLanguage());
            labelTitle.setText(properties.getProperty("authorization_title"));
            labelText1.setText(properties.getProperty("authorization_text_1"));
            labelLink1.setText(properties.getProperty("authorization_link_1"));
            labelText2.setText(properties.getProperty("authorization_text_2"));
            labelLink2.setText(properties.getProperty("authorization_link_2"));
            labelText3.setText(properties.getProperty("authorization_text_3"));
            buttonAuthorize.setText(properties.getProperty("authorization_authorize"));
            menuItemCopy.setText(properties.getProperty("copy"));
            menuItemPaste.setText(properties.getProperty("paste"));
        } catch (IOException ex) {
            Logger.getLogger(AuthorizationBase.class.getName()).log(Level.SEVERE, null, ex);
        }
        labelInfo.setText(" ");
        textField2.setText(null);
        oAuthService = getOAuthService();
        requestToken = getRequestToken(oAuthService);
        textField1.setText(oAuthService.getAuthorizationUrl(requestToken));
        textField1.selectAll();
        textField1.requestFocus();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAuthorize;
    private javax.swing.JLabel labelInfo;
    private javax.swing.JLabel labelLink1;
    private javax.swing.JLabel labelLink2;
    private javax.swing.JLabel labelText1;
    private javax.swing.JLabel labelText2;
    private javax.swing.JLabel labelText3;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JMenuItem menuItemCopy;
    private javax.swing.JMenuItem menuItemPaste;
    private javax.swing.JPopupMenu popupMenuCopy;
    private javax.swing.JPopupMenu popupMenuPaste;
    private javax.swing.JTextField textField1;
    private javax.swing.JTextField textField2;
    // End of variables declaration//GEN-END:variables
}
