/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Aleksandar Cvetković
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package htsquirrel.gui.filters;

/**
 *
 * @author Aleksandar Cvetković <arcvetkovic@gmail.com>
 */
public class MatchType extends javax.swing.JPanel {

    /**
     * Creates new form MatchType
     */
    public MatchType() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelTop = new javax.swing.JPanel();
        labelCompetitions = new javax.swing.JLabel();
        labelFriendlies = new javax.swing.JLabel();
        panelScroll = new javax.swing.JScrollPane();
        panelBottom = new javax.swing.JPanel();
        panelAllCompetitions = new javax.swing.JPanel();
        cbAllCompetitions = new javax.swing.JCheckBox();
        panelLeague = new javax.swing.JPanel();
        cbLeague = new javax.swing.JCheckBox();
        cbQualification = new javax.swing.JCheckBox();
        panelNationalCup = new javax.swing.JPanel();
        cbNationalCup = new javax.swing.JCheckBox();
        cbNationalEmerald = new javax.swing.JCheckBox();
        cbNationalRuby = new javax.swing.JCheckBox();
        cbNationalSapphire = new javax.swing.JCheckBox();
        cbNationalConsolation = new javax.swing.JCheckBox();
        panelDivisionalCup = new javax.swing.JPanel();
        cbDivisionalCup = new javax.swing.JCheckBox();
        cbDivisionalEmerald = new javax.swing.JCheckBox();
        cbDivisionalRuby = new javax.swing.JCheckBox();
        cbDivisionalSapphire = new javax.swing.JCheckBox();
        cbDivisionalConsolation = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        labelDivisional = new javax.swing.JLabel();
        cbLevel7 = new javax.swing.JCheckBox();
        cbLevel8 = new javax.swing.JCheckBox();
        cbLevel9 = new javax.swing.JCheckBox();
        panelHattrickMasters = new javax.swing.JPanel();
        cbHattrickMasters = new javax.swing.JCheckBox();
        panelAllFriendlies = new javax.swing.JPanel();
        cbAllFriendlies = new javax.swing.JCheckBox();
        panelFriendlies = new javax.swing.JPanel();
        cbFriendlyNormal = new javax.swing.JCheckBox();
        cbFriendlyCup = new javax.swing.JCheckBox();
        cbIntFriendlyNormal = new javax.swing.JCheckBox();
        cbIntFriendlyCup = new javax.swing.JCheckBox();

        setMaximumSize(new java.awt.Dimension(400, 2147483647));
        setMinimumSize(new java.awt.Dimension(400, 50));
        setPreferredSize(new java.awt.Dimension(400, 640));
        setLayout(new java.awt.GridBagLayout());

        panelTop.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelTop.setMaximumSize(new java.awt.Dimension(32767, 30));
        panelTop.setMinimumSize(new java.awt.Dimension(100, 30));
        panelTop.setPreferredSize(new java.awt.Dimension(100, 30));
        panelTop.setLayout(new java.awt.GridLayout(1, 2));

        labelCompetitions.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        labelCompetitions.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelCompetitions.setText("Competitions");
        labelCompetitions.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        labelCompetitions.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelCompetitions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelCompetitionsMouseClicked(evt);
            }
        });
        panelTop.add(labelCompetitions);

        labelFriendlies.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        labelFriendlies.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelFriendlies.setText("Friendlies");
        labelFriendlies.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        labelFriendlies.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelFriendlies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelFriendliesMouseClicked(evt);
            }
        });
        panelTop.add(labelFriendlies);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(panelTop, gridBagConstraints);

        panelScroll.setPreferredSize(new java.awt.Dimension(400, 610));

        panelBottom.setPreferredSize(new java.awt.Dimension(400, 607));
        panelBottom.setLayout(new java.awt.CardLayout());

        panelAllCompetitions.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cbAllCompetitions.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbAllCompetitions.setSelected(true);
        cbAllCompetitions.setText("All competitions");
        cbAllCompetitions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAllCompetitionsActionPerformed(evt);
            }
        });

        panelLeague.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "League", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 0, 12))); // NOI18N

        cbLeague.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbLeague.setSelected(true);
        cbLeague.setText("League");
        cbLeague.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLeagueActionPerformed(evt);
            }
        });

        cbQualification.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbQualification.setSelected(true);
        cbQualification.setText("Qualification");
        cbQualification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbQualificationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLeagueLayout = new javax.swing.GroupLayout(panelLeague);
        panelLeague.setLayout(panelLeagueLayout);
        panelLeagueLayout.setHorizontalGroup(
            panelLeagueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLeagueLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLeagueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbLeague)
                    .addComponent(cbQualification))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelLeagueLayout.setVerticalGroup(
            panelLeagueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLeagueLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbLeague)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbQualification)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelNationalCup.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "National Cup", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 0, 12))); // NOI18N

        cbNationalCup.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbNationalCup.setSelected(true);
        cbNationalCup.setText("National Cup");
        cbNationalCup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNationalCupActionPerformed(evt);
            }
        });

        cbNationalEmerald.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbNationalEmerald.setSelected(true);
        cbNationalEmerald.setText("Emerald Challenger Cup");
        cbNationalEmerald.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNationalEmeraldActionPerformed(evt);
            }
        });

        cbNationalRuby.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbNationalRuby.setSelected(true);
        cbNationalRuby.setText("Ruby Challenger Cup");
        cbNationalRuby.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNationalRubyActionPerformed(evt);
            }
        });

        cbNationalSapphire.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbNationalSapphire.setSelected(true);
        cbNationalSapphire.setText("Sapphire Challenger Cup");
        cbNationalSapphire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNationalSapphireActionPerformed(evt);
            }
        });

        cbNationalConsolation.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbNationalConsolation.setSelected(true);
        cbNationalConsolation.setText("Consolation Cup");
        cbNationalConsolation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNationalConsolationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelNationalCupLayout = new javax.swing.GroupLayout(panelNationalCup);
        panelNationalCup.setLayout(panelNationalCupLayout);
        panelNationalCupLayout.setHorizontalGroup(
            panelNationalCupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNationalCupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelNationalCupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbNationalConsolation)
                    .addComponent(cbNationalCup)
                    .addComponent(cbNationalEmerald)
                    .addComponent(cbNationalRuby)
                    .addComponent(cbNationalSapphire))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelNationalCupLayout.setVerticalGroup(
            panelNationalCupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNationalCupLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbNationalCup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbNationalEmerald)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbNationalRuby)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbNationalSapphire)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbNationalConsolation)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelDivisionalCup.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Divisional Cup", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 0, 12))); // NOI18N

        cbDivisionalCup.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbDivisionalCup.setSelected(true);
        cbDivisionalCup.setText("Divisional Cup");
        cbDivisionalCup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDivisionalCupActionPerformed(evt);
            }
        });

        cbDivisionalEmerald.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbDivisionalEmerald.setSelected(true);
        cbDivisionalEmerald.setText("Emerald Challenger Cup");
        cbDivisionalEmerald.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDivisionalEmeraldActionPerformed(evt);
            }
        });

        cbDivisionalRuby.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbDivisionalRuby.setSelected(true);
        cbDivisionalRuby.setText("Ruby Challenger Cup");
        cbDivisionalRuby.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDivisionalRubyActionPerformed(evt);
            }
        });

        cbDivisionalSapphire.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbDivisionalSapphire.setSelected(true);
        cbDivisionalSapphire.setText("Sapphire Challenger Cup");
        cbDivisionalSapphire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDivisionalSapphireActionPerformed(evt);
            }
        });

        cbDivisionalConsolation.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbDivisionalConsolation.setSelected(true);
        cbDivisionalConsolation.setText("Consolation Cup");
        cbDivisionalConsolation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDivisionalConsolationActionPerformed(evt);
            }
        });

        jSeparator1.setMinimumSize(new java.awt.Dimension(50, 1));
        jSeparator1.setPreferredSize(new java.awt.Dimension(50, 1));

        labelDivisional.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        labelDivisional.setText("Divisional Cup levels:");

        cbLevel7.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbLevel7.setSelected(true);
        cbLevel7.setText("7");
        cbLevel7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLevel7ActionPerformed(evt);
            }
        });

        cbLevel8.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbLevel8.setSelected(true);
        cbLevel8.setText("8");
        cbLevel8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLevel8ActionPerformed(evt);
            }
        });

        cbLevel9.setSelected(true);
        cbLevel9.setText("9");
        cbLevel9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLevel9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelDivisionalCupLayout = new javax.swing.GroupLayout(panelDivisionalCup);
        panelDivisionalCup.setLayout(panelDivisionalCupLayout);
        panelDivisionalCupLayout.setHorizontalGroup(
            panelDivisionalCupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDivisionalCupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDivisionalCupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelDivisionalCupLayout.createSequentialGroup()
                        .addGroup(panelDivisionalCupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbDivisionalCup)
                            .addComponent(cbDivisionalEmerald)
                            .addComponent(cbDivisionalRuby)
                            .addComponent(cbDivisionalSapphire)
                            .addComponent(cbDivisionalConsolation)
                            .addGroup(panelDivisionalCupLayout.createSequentialGroup()
                                .addComponent(labelDivisional)
                                .addGap(18, 18, 18)
                                .addComponent(cbLevel7)
                                .addGap(18, 18, 18)
                                .addComponent(cbLevel8)
                                .addGap(18, 18, 18)
                                .addComponent(cbLevel9)))
                        .addGap(0, 69, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelDivisionalCupLayout.setVerticalGroup(
            panelDivisionalCupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDivisionalCupLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbDivisionalCup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbDivisionalEmerald)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbDivisionalRuby)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbDivisionalSapphire)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbDivisionalConsolation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDivisionalCupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbLevel7)
                    .addComponent(labelDivisional)
                    .addComponent(cbLevel8)
                    .addComponent(cbLevel9))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelHattrickMasters.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Hattrick Masters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 0, 12))); // NOI18N

        cbHattrickMasters.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbHattrickMasters.setSelected(true);
        cbHattrickMasters.setText("Hattrick Masters");
        cbHattrickMasters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbHattrickMastersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelHattrickMastersLayout = new javax.swing.GroupLayout(panelHattrickMasters);
        panelHattrickMasters.setLayout(panelHattrickMastersLayout);
        panelHattrickMastersLayout.setHorizontalGroup(
            panelHattrickMastersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHattrickMastersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbHattrickMasters)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelHattrickMastersLayout.setVerticalGroup(
            panelHattrickMastersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHattrickMastersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbHattrickMasters)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelAllCompetitionsLayout = new javax.swing.GroupLayout(panelAllCompetitions);
        panelAllCompetitions.setLayout(panelAllCompetitionsLayout);
        panelAllCompetitionsLayout.setHorizontalGroup(
            panelAllCompetitionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAllCompetitionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAllCompetitionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelLeague, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelNationalCup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelDivisionalCup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelAllCompetitionsLayout.createSequentialGroup()
                        .addComponent(cbAllCompetitions)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelHattrickMasters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelAllCompetitionsLayout.setVerticalGroup(
            panelAllCompetitionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAllCompetitionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbAllCompetitions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelLeague, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelNationalCup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelDivisionalCup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelHattrickMasters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelBottom.add(panelAllCompetitions, "card2");

        panelAllFriendlies.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cbAllFriendlies.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbAllFriendlies.setText("All friendlies");
        cbAllFriendlies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAllFriendliesActionPerformed(evt);
            }
        });

        panelFriendlies.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Friendlies", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 0, 12))); // NOI18N

        cbFriendlyNormal.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbFriendlyNormal.setText("Friendly (normal rules)");
        cbFriendlyNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFriendlyNormalActionPerformed(evt);
            }
        });

        cbFriendlyCup.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbFriendlyCup.setText("Friendly (cup rules)");
        cbFriendlyCup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFriendlyCupActionPerformed(evt);
            }
        });

        cbIntFriendlyNormal.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbIntFriendlyNormal.setText("International friendly (normal rules)");
        cbIntFriendlyNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbIntFriendlyNormalActionPerformed(evt);
            }
        });

        cbIntFriendlyCup.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        cbIntFriendlyCup.setText("International friendly (cup rules)");
        cbIntFriendlyCup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbIntFriendlyCupActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFriendliesLayout = new javax.swing.GroupLayout(panelFriendlies);
        panelFriendlies.setLayout(panelFriendliesLayout);
        panelFriendliesLayout.setHorizontalGroup(
            panelFriendliesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFriendliesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFriendliesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbFriendlyNormal)
                    .addComponent(cbFriendlyCup)
                    .addComponent(cbIntFriendlyNormal)
                    .addComponent(cbIntFriendlyCup))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        panelFriendliesLayout.setVerticalGroup(
            panelFriendliesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFriendliesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbFriendlyNormal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbFriendlyCup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbIntFriendlyNormal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbIntFriendlyCup)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelAllFriendliesLayout = new javax.swing.GroupLayout(panelAllFriendlies);
        panelAllFriendlies.setLayout(panelAllFriendliesLayout);
        panelAllFriendliesLayout.setHorizontalGroup(
            panelAllFriendliesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAllFriendliesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAllFriendliesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAllFriendliesLayout.createSequentialGroup()
                        .addComponent(cbAllFriendlies)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelFriendlies, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelAllFriendliesLayout.setVerticalGroup(
            panelAllFriendliesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAllFriendliesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbAllFriendlies)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelFriendlies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(418, Short.MAX_VALUE))
        );

        panelBottom.add(panelAllFriendlies, "card3");

        panelScroll.setViewportView(panelBottom);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(panelScroll, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void labelCompetitionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelCompetitionsMouseClicked
        labelCompetitions.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        labelFriendlies.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelAllCompetitions.setVisible(true);
        panelAllFriendlies.setVisible(false);
    }//GEN-LAST:event_labelCompetitionsMouseClicked

    private void labelFriendliesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelFriendliesMouseClicked
        labelCompetitions.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        labelFriendlies.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelAllCompetitions.setVisible(false);
        panelAllFriendlies.setVisible(true);
    }//GEN-LAST:event_labelFriendliesMouseClicked

    private void cbAllCompetitionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAllCompetitionsActionPerformed
        if (cbAllCompetitions.isSelected()) {
            cbLeague.setSelected(true);
            cbQualification.setSelected(true);
            cbNationalCup.setSelected(true);
            cbNationalEmerald.setSelected(true);
            cbNationalRuby.setSelected(true);
            cbNationalSapphire.setSelected(true);
            cbNationalConsolation.setSelected(true);
            cbDivisionalCup.setSelected(true);
            cbDivisionalEmerald.setSelected(true);
            cbDivisionalRuby.setSelected(true);
            cbDivisionalSapphire.setSelected(true);
            cbDivisionalConsolation.setSelected(true);
            cbLevel7.setSelected(true);
            cbLevel8.setSelected(true);
            cbLevel9.setSelected(true);
            cbHattrickMasters.setSelected(true);
        } else {
            cbLeague.setSelected(false);
            cbQualification.setSelected(false);
            cbNationalCup.setSelected(false);
            cbNationalEmerald.setSelected(false);
            cbNationalRuby.setSelected(false);
            cbNationalSapphire.setSelected(false);
            cbNationalConsolation.setSelected(false);
            cbDivisionalCup.setSelected(false);
            cbDivisionalEmerald.setSelected(false);
            cbDivisionalRuby.setSelected(false);
            cbDivisionalSapphire.setSelected(false);
            cbDivisionalConsolation.setSelected(false);
            cbLevel7.setSelected(false);
            cbLevel8.setSelected(false);
            cbLevel9.setSelected(false);
            cbHattrickMasters.setSelected(false);
        }
    }//GEN-LAST:event_cbAllCompetitionsActionPerformed

    private void cbLeagueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLeagueActionPerformed
        if (allCompetitionsSelected()) {
            cbAllCompetitions.setSelected(true);
        } else {
            cbAllCompetitions.setSelected(false);
        }
    }//GEN-LAST:event_cbLeagueActionPerformed

    private void cbQualificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbQualificationActionPerformed
        if (allCompetitionsSelected()) {
            cbAllCompetitions.setSelected(true);
        } else {
            cbAllCompetitions.setSelected(false);
        }
    }//GEN-LAST:event_cbQualificationActionPerformed

    private void cbNationalCupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNationalCupActionPerformed
        if (allCompetitionsSelected()) {
            cbAllCompetitions.setSelected(true);
        } else {
            cbAllCompetitions.setSelected(false);
        }
    }//GEN-LAST:event_cbNationalCupActionPerformed

    private void cbNationalEmeraldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNationalEmeraldActionPerformed
        if (allCompetitionsSelected()) {
            cbAllCompetitions.setSelected(true);
        } else {
            cbAllCompetitions.setSelected(false);
        }
    }//GEN-LAST:event_cbNationalEmeraldActionPerformed

    private void cbNationalRubyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNationalRubyActionPerformed
        if (allCompetitionsSelected()) {
            cbAllCompetitions.setSelected(true);
        } else {
            cbAllCompetitions.setSelected(false);
        }
    }//GEN-LAST:event_cbNationalRubyActionPerformed

    private void cbNationalSapphireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNationalSapphireActionPerformed
        if (allCompetitionsSelected()) {
            cbAllCompetitions.setSelected(true);
        } else {
            cbAllCompetitions.setSelected(false);
        }
    }//GEN-LAST:event_cbNationalSapphireActionPerformed

    private void cbNationalConsolationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNationalConsolationActionPerformed
        if (allCompetitionsSelected()) {
            cbAllCompetitions.setSelected(true);
        } else {
            cbAllCompetitions.setSelected(false);
        }
    }//GEN-LAST:event_cbNationalConsolationActionPerformed

    private void cbDivisionalCupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDivisionalCupActionPerformed
        if (allCompetitionsSelected()) {
            cbAllCompetitions.setSelected(true);
        } else {
            cbAllCompetitions.setSelected(false);
        }
    }//GEN-LAST:event_cbDivisionalCupActionPerformed

    private void cbDivisionalEmeraldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDivisionalEmeraldActionPerformed
        if (allCompetitionsSelected()) {
            cbAllCompetitions.setSelected(true);
        } else {
            cbAllCompetitions.setSelected(false);
        }
    }//GEN-LAST:event_cbDivisionalEmeraldActionPerformed

    private void cbDivisionalRubyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDivisionalRubyActionPerformed
        if (allCompetitionsSelected()) {
            cbAllCompetitions.setSelected(true);
        } else {
            cbAllCompetitions.setSelected(false);
        }
    }//GEN-LAST:event_cbDivisionalRubyActionPerformed

    private void cbDivisionalSapphireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDivisionalSapphireActionPerformed
        if (allCompetitionsSelected()) {
            cbAllCompetitions.setSelected(true);
        } else {
            cbAllCompetitions.setSelected(false);
        }
    }//GEN-LAST:event_cbDivisionalSapphireActionPerformed

    private void cbDivisionalConsolationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDivisionalConsolationActionPerformed
        if (allCompetitionsSelected()) {
            cbAllCompetitions.setSelected(true);
        } else {
            cbAllCompetitions.setSelected(false);
        }
    }//GEN-LAST:event_cbDivisionalConsolationActionPerformed

    private void cbLevel7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLevel7ActionPerformed
        if (allCompetitionsSelected()) {
            cbAllCompetitions.setSelected(true);
        } else {
            cbAllCompetitions.setSelected(false);
        }
    }//GEN-LAST:event_cbLevel7ActionPerformed

    private void cbLevel8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLevel8ActionPerformed
        if (allCompetitionsSelected()) {
            cbAllCompetitions.setSelected(true);
        } else {
            cbAllCompetitions.setSelected(false);
        }
    }//GEN-LAST:event_cbLevel8ActionPerformed

    private void cbLevel9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLevel9ActionPerformed
        if (allCompetitionsSelected()) {
            cbAllCompetitions.setSelected(true);
        } else {
            cbAllCompetitions.setSelected(false);
        }
    }//GEN-LAST:event_cbLevel9ActionPerformed

    private void cbHattrickMastersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbHattrickMastersActionPerformed
        if (allCompetitionsSelected()) {
            cbAllCompetitions.setSelected(true);
        } else {
            cbAllCompetitions.setSelected(false);
        }
    }//GEN-LAST:event_cbHattrickMastersActionPerformed

    private void cbAllFriendliesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAllFriendliesActionPerformed
        if (cbAllFriendlies.isSelected()) {
            cbFriendlyNormal.setSelected(true);
            cbFriendlyCup.setSelected(true);
            cbIntFriendlyNormal.setSelected(true);
            cbIntFriendlyCup.setSelected(true);
        } else {
            cbFriendlyNormal.setSelected(false);
            cbFriendlyCup.setSelected(false);
            cbIntFriendlyNormal.setSelected(false);
            cbIntFriendlyCup.setSelected(false);
        }
    }//GEN-LAST:event_cbAllFriendliesActionPerformed

    private void cbFriendlyNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFriendlyNormalActionPerformed
        if (allFriendliesSelected()) {
            cbAllFriendlies.setSelected(true);
        } else {
            cbAllFriendlies.setSelected(false);
        }
    }//GEN-LAST:event_cbFriendlyNormalActionPerformed

    private void cbFriendlyCupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFriendlyCupActionPerformed
        if (allFriendliesSelected()) {
            cbAllFriendlies.setSelected(true);
        } else {
            cbAllFriendlies.setSelected(false);
        }
    }//GEN-LAST:event_cbFriendlyCupActionPerformed

    private void cbIntFriendlyNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbIntFriendlyNormalActionPerformed
        if (allFriendliesSelected()) {
            cbAllFriendlies.setSelected(true);
        } else {
            cbAllFriendlies.setSelected(false);
        }
    }//GEN-LAST:event_cbIntFriendlyNormalActionPerformed

    private void cbIntFriendlyCupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbIntFriendlyCupActionPerformed
        if (allFriendliesSelected()) {
            cbAllFriendlies.setSelected(true);
        } else {
            cbAllFriendlies.setSelected(false);
        }
    }//GEN-LAST:event_cbIntFriendlyCupActionPerformed

    private boolean allCompetitionsSelected() {
        boolean result;
        if (cbLeague.isSelected() &&
            cbQualification.isSelected() &&
            cbNationalCup.isSelected() &&
            cbNationalEmerald.isSelected() &&
            cbNationalRuby.isSelected() &&
            cbNationalSapphire.isSelected() &&
            cbNationalConsolation.isSelected() &&
            cbDivisionalCup.isSelected() &&
            cbDivisionalEmerald.isSelected() &&
            cbDivisionalRuby.isSelected() &&
            cbDivisionalSapphire.isSelected() &&
            cbDivisionalConsolation.isSelected() &&
            cbLevel7.isSelected() &&
            cbLevel8.isSelected() &&
            cbLevel9.isSelected() &&
            cbHattrickMasters.isSelected()) {
            result = true;
        } else {
            result = false;
        }
        return result;
    }

    private boolean allFriendliesSelected() {
        boolean result;
        if (cbFriendlyNormal.isSelected() &&
            cbFriendlyCup.isSelected() &&
            cbIntFriendlyNormal.isSelected() &&
            cbIntFriendlyCup.isSelected()) {
            result = true;
        } else {
            result = false;
        }
        return result;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbAllCompetitions;
    private javax.swing.JCheckBox cbAllFriendlies;
    private javax.swing.JCheckBox cbDivisionalConsolation;
    private javax.swing.JCheckBox cbDivisionalCup;
    private javax.swing.JCheckBox cbDivisionalEmerald;
    private javax.swing.JCheckBox cbDivisionalRuby;
    private javax.swing.JCheckBox cbDivisionalSapphire;
    private javax.swing.JCheckBox cbFriendlyCup;
    private javax.swing.JCheckBox cbFriendlyNormal;
    private javax.swing.JCheckBox cbHattrickMasters;
    private javax.swing.JCheckBox cbIntFriendlyCup;
    private javax.swing.JCheckBox cbIntFriendlyNormal;
    private javax.swing.JCheckBox cbLeague;
    private javax.swing.JCheckBox cbLevel7;
    private javax.swing.JCheckBox cbLevel8;
    private javax.swing.JCheckBox cbLevel9;
    private javax.swing.JCheckBox cbNationalConsolation;
    private javax.swing.JCheckBox cbNationalCup;
    private javax.swing.JCheckBox cbNationalEmerald;
    private javax.swing.JCheckBox cbNationalRuby;
    private javax.swing.JCheckBox cbNationalSapphire;
    private javax.swing.JCheckBox cbQualification;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelCompetitions;
    private javax.swing.JLabel labelDivisional;
    private javax.swing.JLabel labelFriendlies;
    private javax.swing.JPanel panelAllCompetitions;
    private javax.swing.JPanel panelAllFriendlies;
    private javax.swing.JPanel panelBottom;
    private javax.swing.JPanel panelDivisionalCup;
    private javax.swing.JPanel panelFriendlies;
    private javax.swing.JPanel panelHattrickMasters;
    private javax.swing.JPanel panelLeague;
    private javax.swing.JPanel panelNationalCup;
    private javax.swing.JScrollPane panelScroll;
    private javax.swing.JPanel panelTop;
    // End of variables declaration//GEN-END:variables
}
